<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://drjasonhan.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 07 Oct 2020 19:01:53 +0800</lastBuildDate><atom:link href="https://drjasonhan.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub 如何配置SSH密钥</title>
      <link>https://drjasonhan.github.io/post/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</guid>
      <description>GitHub 如何配置SSH密钥
1. SSH 是什么 SSH（Security shell, 安全外壳协议），是一种加密的网络传输协议，可以再不安全的网络中为网络服务提供安全的传输环境。SSH通过在网路中建立安全隧道来实现客户端与服务器之间的连接[参考]。
2. GitHub管理项目的两种方式 [参考] 一种是直接使用 https url 克隆到本地，一种是使用SSH url 克隆到本地。对于初学者，使用https url比较方便，而在使用SSH之前，却需要先在本地配置好SSH Key。同时，如果想使用SSH url克隆，你必须是项目的拥有者，否则无法添加SSH key。 在clone项目时，使用https url可以随意clone；而使用SSH时，条件是自己是该项目的拥有者或管理员。 在push代码时，https url需要验证用户名和密码；SSH则不需要输入用户名，因为已经通过公钥和私钥在GitHub服务器上进行了定向的识别，如果设置了密码，则需要设置密码，也可以不设置。注：公钥是给服务器的，在生成密钥的时候，XXX.pub是公钥，XXX则是对应的私钥，一般存放在C:\Users\xxx.ssh里面[参考]
3. 如何生成密钥 1. 验证是否存在密钥 打开 git bash，输入
$ cd ~/.ssh$ ls第一句是转到SSH所在的文件夹，如果本地已经存在了密钥，命令行则会直接转到~/.ssh。ls是显示当前路径下的所有文件，与Linux中的命令相同。如果存在密钥，则会显示id_rsa_pub或id_dsa.pub。 2. 创建一个SSH Key $ ssh-keygen -t rsa -C&amp;quot;email@example.com&amp;quot; 其中，-t 制定密钥的类型，默认是rsa，可以省略。 -C 设置注释文字，比如邮箱 -f 制定密钥文件存储文件名。 以上代码省略了-f参数，运行后会让你输入文件名，用于保存刚才生成的SSH Key，如：
Generating public/private rsa key pair.# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]也可以不输入文件名，直接回车，则会生成默认的密钥文件id_rsa.</description>
    </item>
    
    <item>
      <title>Mermaid绘图基础</title>
      <link>https://drjasonhan.github.io/post/mermaid%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/mermaid%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80/</guid>
      <description>#Mermaid绘图基础 在 Markdown 中进行简易的流程图绘制，最常用的就是Mermaid。
1. 基本语法 Mermaid制作流程图的基本语法格式如下：
​```mermaidgraph 方向;开始--&amp;gt;结束;``` 方向可以为TB(从上到下)、LR(从左到右)、RL(从右到左)、BT(从下到上) “开始”和“结束”都代表流程图中的标签，标签的格式为id[显示内容]，这里的方括号代表标签的图形为直角方框，也可以换成圆括号，图形将会变成圆角方框。 示例：  ```mermaidgraph LR;A[&amp;quot;开始&amp;quot;]--&amp;gt;B(&amp;quot;结束&amp;quot;);```显示为： ​```mermaid graph LR; A[&amp;ldquo;开始&amp;rdquo;]&amp;ndash;&amp;gt;B(&amp;ldquo;结束&amp;rdquo;);
</description>
    </item>
    
    <item>
      <title>Vim 入门</title>
      <link>https://drjasonhan.github.io/post/vim%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/vim%E5%85%A5%E9%97%A8/</guid>
      <description>1. 基础篇·  移动光标 在 Normal 模式下，hjkl分别对应前、下、上和后。 模式切换 在任何模式下，点击esc都可以切换回 Normal模式；在Normal模式下，点击i(英文状态下)可以进入Insert模式； Normal 模式下 输入: 转入扩展命令模式。 退出 在扩展命令模式下输入 q 保存退出 在扩展命令模式下输入 wq 把光标移动到文档的第一行 Normal 模式下 gg 把光标移动到文档最后一行 Normal 模式下 shift+g 剪切  剪切光标所在的行 dd 剪切光标一下n行 n+dd   粘贴 p 复制  复制光标所在行 yy 复制光标一下n行 n+yy   删除 同剪切一样 dd   2. 常见问题  在vscdode中配置vim 打开settings，通过json文件配置，增加 &amp;quot;vim.insertModeKeyBindings&amp;quot;: [{&amp;quot;before&amp;quot;: [&amp;quot;j&amp;quot;,&amp;quot;j&amp;quot;],&amp;quot;after&amp;quot;: [&amp;quot;&amp;lt;esc&amp;gt;&amp;quot;]}]before 和 after 建立了一对映射，当输入jj时，相当于按了esc键
  </description>
    </item>
    
    <item>
      <title>欧拉-庞加莱准则</title>
      <link>https://drjasonhan.github.io/post/%E6%AC%A7%E6%8B%89-%E5%BA%9E%E5%8A%A0%E8%8E%B1%E5%87%86%E5%88%99/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/%E6%AC%A7%E6%8B%89-%E5%BA%9E%E5%8A%A0%E8%8E%B1%E5%87%86%E5%88%99/</guid>
      <description>最近投了一篇水工岩体随机裂隙网络建模的论文，其中有一部分内容是裂隙切割岩体成多面块体。审稿人评论需要证明符合“欧拉-庞加莱准则”。经过大量搜索发现中文的相关内容很少，遂进行了查阅，做了如下总结。
1. 欧拉-庞加莱准则的主要内容 欧拉-庞加莱准则（或公式）是描述流形的顶点、边、面的个数之间的关系的等式。公式如下： $ V-E+F+(L-F)-2(S-G)=0 $ 其中，V代表顶点的个数、E代表边的个数、F为面的个数、G代表实体中洞的个数（genus，亏格）、S为外壳（Shell）的数量
老师博士论文P28 欧拉公式不太一样</description>
    </item>
    
    <item>
      <title>重新理解MLE，MAP和贝叶斯估计</title>
      <link>https://drjasonhan.github.io/post/%E7%90%86%E8%A7%A3mlemap%E5%92%8C%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/%E7%90%86%E8%A7%A3mlemap%E5%92%8C%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1/</guid>
      <description>1. MLE，极大似然估计 MLE把带估计的参数看做确定的量，其目标函数是使得以观察到的样本的概率最大： $$ \operatorname{argmax}p(X \mid \theta)=\operatorname{argmax}\prod_{x_1}^{x_n} p(x_i \mid \theta) \tag{1} $$ 对数化处理后为： $$ \operatorname{argmax}\prod_{x_1}^{x_n} p(x_i \mid \theta)=\operatorname{argmax}\sum_{x_1}^{x_n} \log p(x_i \mid \theta) \tag{2} $$ 即： $$ \left{ \begin{aligned} &amp;amp;L(\theta) = \sum_{x_1}^{x_n} \log p(x_i \mid \theta)\
&amp;amp;\frac{\partial L}{\partial \theta} =0\
\end{aligned} \right. \tag{3} $$
2. MAP，最大后验估计 MAP寻求的是能使后验概率$P(\theta \mid X)$最大的 $\theta$ 值: $$ \begin{aligned} \operatorname{argmax}p(\theta \mid X) &amp;amp;=\operatorname{argmax} \frac{p(X \mid \theta) p(\theta)}{p(X)} \
&amp;amp;=\operatorname{argmax}p(X \mid \theta) p(\theta)\
&amp;amp;=\operatorname{argmax}\left(\prod_{x_1}^{x_n} p(x_i \mid \theta)\right) p(\theta) \end{aligned} \tag{4} $$ 省略$P(X)$是因为$X$与$\theta$无关。对数化处理后，上式可表达为： $$ \operatorname{argmax}\left(\sum_{x_1}^{x_n} \log p(x_i \mid \theta)+\log p(\theta)\right) \tag{5} $$ 相比于式（2），式（4）仅仅是多了一项 $p(\theta)$ ，这就是参数$\theta$的**先验分布**。在实际中，当人们已经接受或知道的普遍的规律时，可以对预先给出这一规律。比如在扔硬币的试验中，每次抛出正面发生的概率应该服从一个概率分布，且基本在0.</description>
    </item>
    
    <item>
      <title>Git 常用命令</title>
      <link>https://drjasonhan.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 07 Oct 2020 14:55:57 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>一、常用命令  撤销更改 git checkout -- &amp;lt;file&amp;gt;。 初始化 git init。 建立与远程仓库的连接 git remote add origin git@github.com:XXXXXXXX.git,其中，remote 即远程；origin 是后面 github 地址的名称，也可自定义成其他名称；本地仓库可以 add 多个远程仓库，推送代码时可指定远程仓库推送。 查看当前远程仓库地址 git remote -v 创建文件 touch 文件名，示例：touch testfile.txt。 暂存文件 add 文件名，示例：git add .其中点 . 代表所有文件。 提交到本地的版本库 git commit -m&amp;quot;添加说明&amp;quot;，示例：git commit -m &amp;quot;修改了XX中的bug&amp;quot;，其中，-m 中的 m 代表 message。  二、问题汇总  git push -u origin master 与 git push origin master 的区别 git push origin master 推送到指定的远程仓库名(origin)的指定分支(master)。当只关联一个远程且只有一个分支时，其可以简写为 git push。但是，当关联了多个远程仓库、有多个分支时，直接用简化的语句可能会报错。 git push -u origin master 的完全版为 git push &amp;ndash;set-upstream origin master。指将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 单杠-和双杠&amp;ndash;的区别 在命令行中，单杠-后面接的是缩写，双杠&amp;ndash;后面要接全称 在 GitHub 中，markdonw文件里的公式不能正常显示怎么办？ 在 Google Chrome 中添加插件(https://chrome.</description>
    </item>
    
  </channel>
</rss>
