<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Jason Han&#39;s Blog</title>
    <link>https://drjasonhan.github.io/tags/c#/</link>
    <description>Recent content in C# on Jason Han&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 30 Dec 2020 14:44:20 +0800</lastBuildDate><atom:link href="https://drjasonhan.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用C#调用Microsoft App Store 中下载的应用</title>
      <link>https://drjasonhan.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8csharp%E8%B0%83%E7%94%A8microsoft-appstore%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 30 Dec 2020 14:44:20 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8csharp%E8%B0%83%E7%94%A8microsoft-appstore%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>Win10之后，许多之前常用的应用，包括录音机、照相机等，都被归为了 Microsoft App Store 所管理的范畴，无法直接通过诸如 Process.Start(&amp;ldquo;video.exe&amp;rdquo;)、Process.Start(&amp;ldquo;camera.exe&amp;rdquo;)等命令调用。目前较为可行的方法是，通过调用 cmd，再将自动填入命令，最终实现 App 的调用。示例代码如下：
Process p = new Process(); //设置要启动的应用程序 p.StartInfo.FileName = &amp;#34;cmd.exe&amp;#34;; //是否使用操作系统shell启动 p.StartInfo.UseShellExecute = false; // 接受来自调用程序的输入信息 p.StartInfo.RedirectStandardInput = true; //输出信息 p.StartInfo.RedirectStandardOutput = true; // 输出错误 p.StartInfo.RedirectStandardError = true; //不显示程序窗口 p.StartInfo.CreateNoWindow = true; //启动程序 p.Start(); // shell 后面的link可能因app的版本而异 p.StandardInput.WriteLine(@&amp;#34;explorer.exe shell:AppsFolder\2568CaiJunhong.CompassOne_nnrr2ryxcqq94!App&amp;#34;); p.Close(); 该示例调用的是“指北针”，其所对应的链接2568CaiJunhong.CompassOne_nnrr2ryxcqq94!App可通过如下方式获取1：
  先打开 cmd，输入explorer.exe shell:AppsFolder\，此时打开了应用文件夹，如图所示：
  选中其中一个应用，右键创建快捷方式至桌面；
  右击桌面的快捷方式，选择属性，即可获得上述链接，如图所示：
  参考   https://answers.microsoft.com/en-us/windows/forum/windows_10-windows_store/starting-windows-10-store-app-from-the-command/836354c5-b5af-4d6c-b414-80e40ed14675 &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>如何使用C#调用已训练好的 pb 模型</title>
      <link>https://drjasonhan.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8csharp%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0pb%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 17 Dec 2020 19:40:02 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8csharp%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0pb%E6%A8%A1%E5%9E%8B/</guid>
      <description>在深度学习领域，Python占据着举足轻重的位置，然而，由于其脚本编程的特点，在业界并没有较大的优势。相比之下，C++、Java、C#等编程语言则能更好的满足业界的各种需求。本人长期从事 C# 开发，本文的内容是探讨如何在C#编程中调用已训练好的 .pb 深度学习模型。
目前已存在多种 .Net 平台下的深度学习框架，如 Tensorflow.Net、SciSharp、TensorflowSharp等。本文以 TensorflowSharp 为例进行讲解。
1. 安装 TensorflowSharp 可直接在 Nuget 中搜索 TensorflowSharp，选择相应版本下载。下载时注意不同版本对应不同的 .Net Framework。
2. 具体代码 调用模型并预测图片的代码为：
TFGraph graph = new TFGraph(); //重点是下面的这句，把训练好的pb文件给读出来字节，然后导入 string modelPath = Directory.GetCurrentDirectory() + &amp;#34;\\model.pb&amp;#34;; byte[] model = File.ReadAllBytes(modelPath); graph.Import(model); var tensor = ImageUtil.CreateTensorFromImageFile(picturePath); using (var sess = new TFSession(graph)) { // 计算类别概率  var runner = sess.GetRunner(); runner.AddInput(graph[&amp;#34;Mul&amp;#34;][0], tensor); var r = runner.Run(graph.Softmax(graph[&amp;#34;final_result&amp;#34;][0])); var v = (float[,])r.GetValue(); } 其中，ImageUtil 代码如下：</description>
    </item>
    
  </channel>
</rss>
