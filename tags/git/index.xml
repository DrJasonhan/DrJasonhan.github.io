<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on </title>
    <link>https://drjasonhan.github.io/tags/git/</link>
    <description>Recent content in git on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 07 Oct 2020 19:01:53 +0800</lastBuildDate><atom:link href="https://drjasonhan.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub 如何配置SSH密钥</title>
      <link>https://drjasonhan.github.io/post/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</guid>
      <description>GitHub 如何配置SSH密钥
1. SSH 是什么 SSH（Security shell, 安全外壳协议），是一种加密的网络传输协议，可以再不安全的网络中为网络服务提供安全的传输环境。SSH通过在网路中建立安全隧道来实现客户端与服务器之间的连接[参考]。
2. GitHub管理项目的两种方式 [参考] 一种是直接使用 https url 克隆到本地，一种是使用SSH url 克隆到本地。对于初学者，使用https url比较方便，而在使用SSH之前，却需要先在本地配置好SSH Key。同时，如果想使用SSH url克隆，你必须是项目的拥有者，否则无法添加SSH key。 在clone项目时，使用https url可以随意clone；而使用SSH时，条件是自己是该项目的拥有者或管理员。 在push代码时，https url需要验证用户名和密码；SSH则不需要输入用户名，因为已经通过公钥和私钥在GitHub服务器上进行了定向的识别，如果设置了密码，则需要设置密码，也可以不设置。注：公钥是给服务器的，在生成密钥的时候，XXX.pub是公钥，XXX则是对应的私钥，一般存放在C:\Users\xxx.ssh里面[参考]
3. 如何生成密钥 1. 验证是否存在密钥 打开 git bash，输入
$ cd ~/.ssh$ ls第一句是转到SSH所在的文件夹，如果本地已经存在了密钥，命令行则会直接转到~/.ssh。ls是显示当前路径下的所有文件，与Linux中的命令相同。如果存在密钥，则会显示id_rsa_pub或id_dsa.pub。 2. 创建一个SSH Key $ ssh-keygen -t rsa -C&amp;quot;email@example.com&amp;quot; 其中，-t 制定密钥的类型，默认是rsa，可以省略。 -C 设置注释文字，比如邮箱 -f 制定密钥文件存储文件名。 以上代码省略了-f参数，运行后会让你输入文件名，用于保存刚才生成的SSH Key，如：
Generating public/private rsa key pair.# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]也可以不输入文件名，直接回车，则会生成默认的密钥文件id_rsa.</description>
    </item>
    
    <item>
      <title>GitHub 如何配置SSH密钥</title>
      <link>https://drjasonhan.github.io/posts/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:53 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/posts/github%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</guid>
      <description>GitHub 如何配置SSH密钥
1. SSH 是什么 SSH（Security shell, 安全外壳协议），是一种加密的网络传输协议，可以再不安全的网络中为网络服务提供安全的传输环境。SSH通过在网路中建立安全隧道来实现客户端与服务器之间的连接[参考]。
2. GitHub管理项目的两种方式 [参考] 一种是直接使用 https url 克隆到本地，一种是使用SSH url 克隆到本地。对于初学者，使用https url比较方便，而在使用SSH之前，却需要先在本地配置好SSH Key。同时，如果想使用SSH url克隆，你必须是项目的拥有者，否则无法添加SSH key。 在clone项目时，使用https url可以随意clone；而使用SSH时，条件是自己是该项目的拥有者或管理员。 在push代码时，https url需要验证用户名和密码；SSH则不需要输入用户名，因为已经通过公钥和私钥在GitHub服务器上进行了定向的识别，如果设置了密码，则需要设置密码，也可以不设置。注：公钥是给服务器的，在生成密钥的时候，XXX.pub是公钥，XXX则是对应的私钥，一般存放在C:\Users\xxx.ssh里面[参考]
3. 如何生成密钥 1. 验证是否存在密钥 打开 git bash，输入
$ cd ~/.ssh$ ls第一句是转到SSH所在的文件夹，如果本地已经存在了密钥，命令行则会直接转到~/.ssh。ls是显示当前路径下的所有文件，与Linux中的命令相同。如果存在密钥，则会显示id_rsa_pub或id_dsa.pub。 2. 创建一个SSH Key $ ssh-keygen -t rsa -C&amp;quot;email@example.com&amp;quot; 其中，-t 制定密钥的类型，默认是rsa，可以省略。 -C 设置注释文字，比如邮箱 -f 制定密钥文件存储文件名。 以上代码省略了-f参数，运行后会让你输入文件名，用于保存刚才生成的SSH Key，如：
Generating public/private rsa key pair.# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]也可以不输入文件名，直接回车，则会生成默认的密钥文件id_rsa.</description>
    </item>
    
    <item>
      <title>Git 常用命令</title>
      <link>https://drjasonhan.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 07 Oct 2020 14:55:57 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>一、常用命令  撤销更改 git checkout -- &amp;lt;file&amp;gt;。 初始化 git init。 建立与远程仓库的连接 git remote add origin git@github.com:XXXXXXXX.git,其中，remote 即远程；origin 是后面 github 地址的名称，也可自定义成其他名称；本地仓库可以 add 多个远程仓库，推送代码时可指定远程仓库推送。 查看当前远程仓库地址 git remote -v 创建文件 touch 文件名，示例：touch testfile.txt。 暂存文件 add 文件名，示例：git add .其中点 . 代表所有文件。 提交到本地的版本库 git commit -m&amp;quot;添加说明&amp;quot;，示例：git commit -m &amp;quot;修改了XX中的bug&amp;quot;，其中，-m 中的 m 代表 message。  二、问题汇总  git push -u origin master 与 git push origin master 的区别 git push origin master 推送到指定的远程仓库名(origin)的指定分支(master)。当只关联一个远程且只有一个分支时，其可以简写为 git push。但是，当关联了多个远程仓库、有多个分支时，直接用简化的语句可能会报错。 git push -u origin master 的完全版为 git push &amp;ndash;set-upstream origin master。指将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 单杠-和双杠&amp;ndash;的区别 在命令行中，单杠-后面接的是缩写，双杠&amp;ndash;后面要接全称 在 GitHub 中，markdonw文件里的公式不能正常显示怎么办？ 在 Google Chrome 中添加插件(https://chrome.</description>
    </item>
    
    <item>
      <title>Git 常用命令</title>
      <link>https://drjasonhan.github.io/posts/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 07 Oct 2020 14:55:57 +0800</pubDate>
      
      <guid>https://drjasonhan.github.io/posts/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>一、常用命令  撤销更改 git checkout -- &amp;lt;file&amp;gt;。 初始化 git init。 建立与远程仓库的连接 git remote add origin git@github.com:XXXXXXXX.git,其中，remote 即远程；origin 是后面 github 地址的名称，也可自定义成其他名称；本地仓库可以 add 多个远程仓库，推送代码时可指定远程仓库推送。 查看当前远程仓库地址 git remote -v 创建文件 touch 文件名，示例：touch testfile.txt。 暂存文件 add 文件名，示例：git add .其中点 . 代表所有文件。 提交到本地的版本库 git commit -m&amp;quot;添加说明&amp;quot;，示例：git commit -m &amp;quot;修改了XX中的bug&amp;quot;，其中，-m 中的 m 代表 message。  二、问题汇总  git push -u origin master 与 git push origin master 的区别 git push origin master 推送到指定的远程仓库名(origin)的指定分支(master)。当只关联一个远程且只有一个分支时，其可以简写为 git push。但是，当关联了多个远程仓库、有多个分支时，直接用简化的语句可能会报错。 git push -u origin master 的完全版为 git push &amp;ndash;set-upstream origin master。指将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 单杠-和双杠&amp;ndash;的区别 在命令行中，单杠-后面接的是缩写，双杠&amp;ndash;后面要接全称 在 GitHub 中，markdonw文件里的公式不能正常显示怎么办？ 在 Google Chrome 中添加插件(https://chrome.</description>
    </item>
    
  </channel>
</rss>
